/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignoutImport } from './routes/signout'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as SongsRouteImport } from './routes/songs/route'
import { Route as SigninRouteImport } from './routes/signin/route'
import { Route as ReleasesRouteImport } from './routes/releases/route'
import { Route as PlaylistRouteImport } from './routes/playlist/route'
import { Route as ArtistsRouteImport } from './routes/artists/route'
import { Route as AlbumsRouteImport } from './routes/albums/route'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AlbumsYearImport } from './routes/albums/$year'
import { Route as AdminAddImport } from './routes/admin/add'
import { Route as AlbumsAllTimeRouteImport } from './routes/albums/all-time/route'
import { Route as AlbumsAllTimeEditImport } from './routes/albums/all-time/edit'
import { Route as AdminEditAlbumIdImport } from './routes/admin/edit/$albumId'

// Create/Update Routes

const SignoutRoute = SignoutImport.update({
  id: '/signout',
  path: '/signout',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const SongsRouteRoute = SongsRouteImport.update({
  id: '/songs',
  path: '/songs',
  getParentRoute: () => rootRoute,
} as any)

const SigninRouteRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const ReleasesRouteRoute = ReleasesRouteImport.update({
  id: '/releases',
  path: '/releases',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistRouteRoute = PlaylistRouteImport.update({
  id: '/playlist',
  path: '/playlist',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsRouteRoute = ArtistsRouteImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsRouteRoute = AlbumsRouteImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsYearRoute = AlbumsYearImport.update({
  id: '/$year',
  path: '/$year',
  getParentRoute: () => AlbumsRouteRoute,
} as any)

const AdminAddRoute = AdminAddImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AlbumsAllTimeRouteRoute = AlbumsAllTimeRouteImport.update({
  id: '/all-time',
  path: '/all-time',
  getParentRoute: () => AlbumsRouteRoute,
} as any)

const AlbumsAllTimeEditRoute = AlbumsAllTimeEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AlbumsAllTimeRouteRoute,
} as any)

const AdminEditAlbumIdRoute = AdminEditAlbumIdImport.update({
  id: '/edit/$albumId',
  path: '/edit/$albumId',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/albums': {
      id: '/albums'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsRouteImport
      parentRoute: typeof rootRoute
    }
    '/artists': {
      id: '/artists'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsRouteImport
      parentRoute: typeof rootRoute
    }
    '/playlist': {
      id: '/playlist'
      path: '/playlist'
      fullPath: '/playlist'
      preLoaderRoute: typeof PlaylistRouteImport
      parentRoute: typeof rootRoute
    }
    '/releases': {
      id: '/releases'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesRouteImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRoute
    }
    '/songs': {
      id: '/songs'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof SongsRouteImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/signout': {
      id: '/signout'
      path: '/signout'
      fullPath: '/signout'
      preLoaderRoute: typeof SignoutImport
      parentRoute: typeof rootRoute
    }
    '/albums/all-time': {
      id: '/albums/all-time'
      path: '/all-time'
      fullPath: '/albums/all-time'
      preLoaderRoute: typeof AlbumsAllTimeRouteImport
      parentRoute: typeof AlbumsRouteImport
    }
    '/admin/add': {
      id: '/admin/add'
      path: '/add'
      fullPath: '/admin/add'
      preLoaderRoute: typeof AdminAddImport
      parentRoute: typeof AdminRouteImport
    }
    '/albums/$year': {
      id: '/albums/$year'
      path: '/$year'
      fullPath: '/albums/$year'
      preLoaderRoute: typeof AlbumsYearImport
      parentRoute: typeof AlbumsRouteImport
    }
    '/admin/edit/$albumId': {
      id: '/admin/edit/$albumId'
      path: '/edit/$albumId'
      fullPath: '/admin/edit/$albumId'
      preLoaderRoute: typeof AdminEditAlbumIdImport
      parentRoute: typeof AdminRouteImport
    }
    '/albums/all-time/edit': {
      id: '/albums/all-time/edit'
      path: '/edit'
      fullPath: '/albums/all-time/edit'
      preLoaderRoute: typeof AlbumsAllTimeEditImport
      parentRoute: typeof AlbumsAllTimeRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminAddRoute: typeof AdminAddRoute
  AdminEditAlbumIdRoute: typeof AdminEditAlbumIdRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminAddRoute: AdminAddRoute,
  AdminEditAlbumIdRoute: AdminEditAlbumIdRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AlbumsAllTimeRouteRouteChildren {
  AlbumsAllTimeEditRoute: typeof AlbumsAllTimeEditRoute
}

const AlbumsAllTimeRouteRouteChildren: AlbumsAllTimeRouteRouteChildren = {
  AlbumsAllTimeEditRoute: AlbumsAllTimeEditRoute,
}

const AlbumsAllTimeRouteRouteWithChildren =
  AlbumsAllTimeRouteRoute._addFileChildren(AlbumsAllTimeRouteRouteChildren)

interface AlbumsRouteRouteChildren {
  AlbumsAllTimeRouteRoute: typeof AlbumsAllTimeRouteRouteWithChildren
  AlbumsYearRoute: typeof AlbumsYearRoute
}

const AlbumsRouteRouteChildren: AlbumsRouteRouteChildren = {
  AlbumsAllTimeRouteRoute: AlbumsAllTimeRouteRouteWithChildren,
  AlbumsYearRoute: AlbumsYearRoute,
}

const AlbumsRouteRouteWithChildren = AlbumsRouteRoute._addFileChildren(
  AlbumsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/albums': typeof AlbumsRouteRouteWithChildren
  '/artists': typeof ArtistsRouteRoute
  '/playlist': typeof PlaylistRouteRoute
  '/releases': typeof ReleasesRouteRoute
  '/signin': typeof SigninRouteRoute
  '/songs': typeof SongsRouteRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/albums/all-time': typeof AlbumsAllTimeRouteRouteWithChildren
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/albums': typeof AlbumsRouteRouteWithChildren
  '/artists': typeof ArtistsRouteRoute
  '/playlist': typeof PlaylistRouteRoute
  '/releases': typeof ReleasesRouteRoute
  '/signin': typeof SigninRouteRoute
  '/songs': typeof SongsRouteRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/albums/all-time': typeof AlbumsAllTimeRouteRouteWithChildren
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/albums': typeof AlbumsRouteRouteWithChildren
  '/artists': typeof ArtistsRouteRoute
  '/playlist': typeof PlaylistRouteRoute
  '/releases': typeof ReleasesRouteRoute
  '/signin': typeof SigninRouteRoute
  '/songs': typeof SongsRouteRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/albums/all-time': typeof AlbumsAllTimeRouteRouteWithChildren
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/songs'
    | '/not-found'
    | '/signout'
    | '/albums/all-time'
    | '/admin/add'
    | '/albums/$year'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/songs'
    | '/not-found'
    | '/signout'
    | '/albums/all-time'
    | '/admin/add'
    | '/albums/$year'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/songs'
    | '/not-found'
    | '/signout'
    | '/albums/all-time'
    | '/admin/add'
    | '/albums/$year'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AlbumsRouteRoute: typeof AlbumsRouteRouteWithChildren
  ArtistsRouteRoute: typeof ArtistsRouteRoute
  PlaylistRouteRoute: typeof PlaylistRouteRoute
  ReleasesRouteRoute: typeof ReleasesRouteRoute
  SigninRouteRoute: typeof SigninRouteRoute
  SongsRouteRoute: typeof SongsRouteRoute
  NotFoundRoute: typeof NotFoundRoute
  SignoutRoute: typeof SignoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AlbumsRouteRoute: AlbumsRouteRouteWithChildren,
  ArtistsRouteRoute: ArtistsRouteRoute,
  PlaylistRouteRoute: PlaylistRouteRoute,
  ReleasesRouteRoute: ReleasesRouteRoute,
  SigninRouteRoute: SigninRouteRoute,
  SongsRouteRoute: SongsRouteRoute,
  NotFoundRoute: NotFoundRoute,
  SignoutRoute: SignoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/albums",
        "/artists",
        "/playlist",
        "/releases",
        "/signin",
        "/songs",
        "/not-found",
        "/signout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/add",
        "/admin/edit/$albumId"
      ]
    },
    "/albums": {
      "filePath": "albums/route.tsx",
      "children": [
        "/albums/all-time",
        "/albums/$year"
      ]
    },
    "/artists": {
      "filePath": "artists/route.tsx"
    },
    "/playlist": {
      "filePath": "playlist/route.tsx"
    },
    "/releases": {
      "filePath": "releases/route.tsx"
    },
    "/signin": {
      "filePath": "signin/route.tsx"
    },
    "/songs": {
      "filePath": "songs/route.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/signout": {
      "filePath": "signout.tsx"
    },
    "/albums/all-time": {
      "filePath": "albums/all-time/route.tsx",
      "parent": "/albums",
      "children": [
        "/albums/all-time/edit"
      ]
    },
    "/admin/add": {
      "filePath": "admin/add.tsx",
      "parent": "/admin"
    },
    "/albums/$year": {
      "filePath": "albums/$year.tsx",
      "parent": "/albums"
    },
    "/admin/edit/$albumId": {
      "filePath": "admin/edit/$albumId.tsx",
      "parent": "/admin"
    },
    "/albums/all-time/edit": {
      "filePath": "albums/all-time/edit.tsx",
      "parent": "/albums/all-time"
    }
  }
}
ROUTE_MANIFEST_END */
