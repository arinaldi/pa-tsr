/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SongsImport } from './routes/songs'
import { Route as SignoutImport } from './routes/signout'
import { Route as SigninImport } from './routes/signin'
import { Route as ReleasesImport } from './routes/releases'
import { Route as PlaylistImport } from './routes/playlist'
import { Route as ArtistsImport } from './routes/artists'
import { Route as AlbumsImport } from './routes/albums'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SongsRoute = SongsImport.update({
  id: '/songs',
  path: '/songs',
  getParentRoute: () => rootRoute,
} as any)

const SignoutRoute = SignoutImport.update({
  id: '/signout',
  path: '/signout',
  getParentRoute: () => rootRoute,
} as any)

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const ReleasesRoute = ReleasesImport.update({
  id: '/releases',
  path: '/releases',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistRoute = PlaylistImport.update({
  id: '/playlist',
  path: '/playlist',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsRoute = ArtistsImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsRoute = AlbumsImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/albums': {
      id: '/albums'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsImport
      parentRoute: typeof rootRoute
    }
    '/artists': {
      id: '/artists'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsImport
      parentRoute: typeof rootRoute
    }
    '/playlist': {
      id: '/playlist'
      path: '/playlist'
      fullPath: '/playlist'
      preLoaderRoute: typeof PlaylistImport
      parentRoute: typeof rootRoute
    }
    '/releases': {
      id: '/releases'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/signout': {
      id: '/signout'
      path: '/signout'
      fullPath: '/signout'
      preLoaderRoute: typeof SignoutImport
      parentRoute: typeof rootRoute
    }
    '/songs': {
      id: '/songs'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof SongsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/artists': typeof ArtistsRoute
  '/playlist': typeof PlaylistRoute
  '/releases': typeof ReleasesRoute
  '/signin': typeof SigninRoute
  '/signout': typeof SignoutRoute
  '/songs': typeof SongsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/artists': typeof ArtistsRoute
  '/playlist': typeof PlaylistRoute
  '/releases': typeof ReleasesRoute
  '/signin': typeof SigninRoute
  '/signout': typeof SignoutRoute
  '/songs': typeof SongsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/artists': typeof ArtistsRoute
  '/playlist': typeof PlaylistRoute
  '/releases': typeof ReleasesRoute
  '/signin': typeof SigninRoute
  '/signout': typeof SignoutRoute
  '/songs': typeof SongsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/signout'
    | '/songs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/signout'
    | '/songs'
  id:
    | '__root__'
    | '/'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/signout'
    | '/songs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsRoute: typeof AlbumsRoute
  ArtistsRoute: typeof ArtistsRoute
  PlaylistRoute: typeof PlaylistRoute
  ReleasesRoute: typeof ReleasesRoute
  SigninRoute: typeof SigninRoute
  SignoutRoute: typeof SignoutRoute
  SongsRoute: typeof SongsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsRoute: AlbumsRoute,
  ArtistsRoute: ArtistsRoute,
  PlaylistRoute: PlaylistRoute,
  ReleasesRoute: ReleasesRoute,
  SigninRoute: SigninRoute,
  SignoutRoute: SignoutRoute,
  SongsRoute: SongsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/albums",
        "/artists",
        "/playlist",
        "/releases",
        "/signin",
        "/signout",
        "/songs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/albums": {
      "filePath": "albums.tsx"
    },
    "/artists": {
      "filePath": "artists.tsx"
    },
    "/playlist": {
      "filePath": "playlist.tsx"
    },
    "/releases": {
      "filePath": "releases.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/signout": {
      "filePath": "signout.tsx"
    },
    "/songs": {
      "filePath": "songs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
