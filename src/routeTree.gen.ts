/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SongsImport } from './routes/songs'
import { Route as ReleasesImport } from './routes/releases'
import { Route as AlbumsImport } from './routes/albums'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SongsRoute = SongsImport.update({
  id: '/songs',
  path: '/songs',
  getParentRoute: () => rootRoute,
} as any)

const ReleasesRoute = ReleasesImport.update({
  id: '/releases',
  path: '/releases',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsRoute = AlbumsImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/albums': {
      id: '/albums'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsImport
      parentRoute: typeof rootRoute
    }
    '/releases': {
      id: '/releases'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesImport
      parentRoute: typeof rootRoute
    }
    '/songs': {
      id: '/songs'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof SongsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/releases': typeof ReleasesRoute
  '/songs': typeof SongsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/releases': typeof ReleasesRoute
  '/songs': typeof SongsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRoute
  '/releases': typeof ReleasesRoute
  '/songs': typeof SongsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/albums' | '/releases' | '/songs'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/albums' | '/releases' | '/songs'
  id: '__root__' | '/' | '/albums' | '/releases' | '/songs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsRoute: typeof AlbumsRoute
  ReleasesRoute: typeof ReleasesRoute
  SongsRoute: typeof SongsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsRoute: AlbumsRoute,
  ReleasesRoute: ReleasesRoute,
  SongsRoute: SongsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/albums",
        "/releases",
        "/songs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/albums": {
      "filePath": "albums.tsx"
    },
    "/releases": {
      "filePath": "releases.tsx"
    },
    "/songs": {
      "filePath": "songs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
