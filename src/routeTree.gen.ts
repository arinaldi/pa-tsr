/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignoutImport } from './routes/signout'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as IndexImport } from './routes/index'
import { Route as SongsIndexImport } from './routes/songs/index'
import { Route as SigninIndexImport } from './routes/signin/index'
import { Route as ReleasesIndexImport } from './routes/releases/index'
import { Route as PlaylistIndexImport } from './routes/playlist/index'
import { Route as ArtistsIndexImport } from './routes/artists/index'
import { Route as AlbumsIndexImport } from './routes/albums/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AlbumsYearImport } from './routes/albums/$year'
import { Route as AdminAddImport } from './routes/admin/add'
import { Route as AlbumsAllTimeIndexImport } from './routes/albums/all-time/index'
import { Route as AlbumsAllTimeEditImport } from './routes/albums/all-time/edit'
import { Route as AdminEditAlbumIdImport } from './routes/admin/edit/$albumId'

// Create/Update Routes

const SignoutRoute = SignoutImport.update({
  id: '/signout',
  path: '/signout',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SongsIndexRoute = SongsIndexImport.update({
  id: '/songs/',
  path: '/songs/',
  getParentRoute: () => rootRoute,
} as any)

const SigninIndexRoute = SigninIndexImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => rootRoute,
} as any)

const ReleasesIndexRoute = ReleasesIndexImport.update({
  id: '/releases/',
  path: '/releases/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistIndexRoute = PlaylistIndexImport.update({
  id: '/playlist/',
  path: '/playlist/',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsIndexRoute = ArtistsIndexImport.update({
  id: '/artists/',
  path: '/artists/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsIndexRoute = AlbumsIndexImport.update({
  id: '/albums/',
  path: '/albums/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsYearRoute = AlbumsYearImport.update({
  id: '/albums/$year',
  path: '/albums/$year',
  getParentRoute: () => rootRoute,
} as any)

const AdminAddRoute = AdminAddImport.update({
  id: '/admin/add',
  path: '/admin/add',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsAllTimeIndexRoute = AlbumsAllTimeIndexImport.update({
  id: '/albums/all-time/',
  path: '/albums/all-time/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsAllTimeEditRoute = AlbumsAllTimeEditImport.update({
  id: '/albums/all-time/edit',
  path: '/albums/all-time/edit',
  getParentRoute: () => rootRoute,
} as any)

const AdminEditAlbumIdRoute = AdminEditAlbumIdImport.update({
  id: '/admin/edit/$albumId',
  path: '/admin/edit/$albumId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/signout': {
      id: '/signout'
      path: '/signout'
      fullPath: '/signout'
      preLoaderRoute: typeof SignoutImport
      parentRoute: typeof rootRoute
    }
    '/admin/add': {
      id: '/admin/add'
      path: '/admin/add'
      fullPath: '/admin/add'
      preLoaderRoute: typeof AdminAddImport
      parentRoute: typeof rootRoute
    }
    '/albums/$year': {
      id: '/albums/$year'
      path: '/albums/$year'
      fullPath: '/albums/$year'
      preLoaderRoute: typeof AlbumsYearImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/albums/': {
      id: '/albums/'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsIndexImport
      parentRoute: typeof rootRoute
    }
    '/artists/': {
      id: '/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/playlist/': {
      id: '/playlist/'
      path: '/playlist'
      fullPath: '/playlist'
      preLoaderRoute: typeof PlaylistIndexImport
      parentRoute: typeof rootRoute
    }
    '/releases/': {
      id: '/releases/'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesIndexImport
      parentRoute: typeof rootRoute
    }
    '/signin/': {
      id: '/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninIndexImport
      parentRoute: typeof rootRoute
    }
    '/songs/': {
      id: '/songs/'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof SongsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/edit/$albumId': {
      id: '/admin/edit/$albumId'
      path: '/admin/edit/$albumId'
      fullPath: '/admin/edit/$albumId'
      preLoaderRoute: typeof AdminEditAlbumIdImport
      parentRoute: typeof rootRoute
    }
    '/albums/all-time/edit': {
      id: '/albums/all-time/edit'
      path: '/albums/all-time/edit'
      fullPath: '/albums/all-time/edit'
      preLoaderRoute: typeof AlbumsAllTimeEditImport
      parentRoute: typeof rootRoute
    }
    '/albums/all-time/': {
      id: '/albums/all-time/'
      path: '/albums/all-time'
      fullPath: '/albums/all-time'
      preLoaderRoute: typeof AlbumsAllTimeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin': typeof AdminIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/playlist': typeof PlaylistIndexRoute
  '/releases': typeof ReleasesIndexRoute
  '/signin': typeof SigninIndexRoute
  '/songs': typeof SongsIndexRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
  '/albums/all-time': typeof AlbumsAllTimeIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin': typeof AdminIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/playlist': typeof PlaylistIndexRoute
  '/releases': typeof ReleasesIndexRoute
  '/signin': typeof SigninIndexRoute
  '/songs': typeof SongsIndexRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
  '/albums/all-time': typeof AlbumsAllTimeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/signout': typeof SignoutRoute
  '/admin/add': typeof AdminAddRoute
  '/albums/$year': typeof AlbumsYearRoute
  '/admin/': typeof AdminIndexRoute
  '/albums/': typeof AlbumsIndexRoute
  '/artists/': typeof ArtistsIndexRoute
  '/playlist/': typeof PlaylistIndexRoute
  '/releases/': typeof ReleasesIndexRoute
  '/signin/': typeof SigninIndexRoute
  '/songs/': typeof SongsIndexRoute
  '/admin/edit/$albumId': typeof AdminEditAlbumIdRoute
  '/albums/all-time/edit': typeof AlbumsAllTimeEditRoute
  '/albums/all-time/': typeof AlbumsAllTimeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/not-found'
    | '/signout'
    | '/admin/add'
    | '/albums/$year'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/songs'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
    | '/albums/all-time'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/not-found'
    | '/signout'
    | '/admin/add'
    | '/albums/$year'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlist'
    | '/releases'
    | '/signin'
    | '/songs'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
    | '/albums/all-time'
  id:
    | '__root__'
    | '/'
    | '/not-found'
    | '/signout'
    | '/admin/add'
    | '/albums/$year'
    | '/admin/'
    | '/albums/'
    | '/artists/'
    | '/playlist/'
    | '/releases/'
    | '/signin/'
    | '/songs/'
    | '/admin/edit/$albumId'
    | '/albums/all-time/edit'
    | '/albums/all-time/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotFoundRoute: typeof NotFoundRoute
  SignoutRoute: typeof SignoutRoute
  AdminAddRoute: typeof AdminAddRoute
  AlbumsYearRoute: typeof AlbumsYearRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AlbumsIndexRoute: typeof AlbumsIndexRoute
  ArtistsIndexRoute: typeof ArtistsIndexRoute
  PlaylistIndexRoute: typeof PlaylistIndexRoute
  ReleasesIndexRoute: typeof ReleasesIndexRoute
  SigninIndexRoute: typeof SigninIndexRoute
  SongsIndexRoute: typeof SongsIndexRoute
  AdminEditAlbumIdRoute: typeof AdminEditAlbumIdRoute
  AlbumsAllTimeEditRoute: typeof AlbumsAllTimeEditRoute
  AlbumsAllTimeIndexRoute: typeof AlbumsAllTimeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotFoundRoute: NotFoundRoute,
  SignoutRoute: SignoutRoute,
  AdminAddRoute: AdminAddRoute,
  AlbumsYearRoute: AlbumsYearRoute,
  AdminIndexRoute: AdminIndexRoute,
  AlbumsIndexRoute: AlbumsIndexRoute,
  ArtistsIndexRoute: ArtistsIndexRoute,
  PlaylistIndexRoute: PlaylistIndexRoute,
  ReleasesIndexRoute: ReleasesIndexRoute,
  SigninIndexRoute: SigninIndexRoute,
  SongsIndexRoute: SongsIndexRoute,
  AdminEditAlbumIdRoute: AdminEditAlbumIdRoute,
  AlbumsAllTimeEditRoute: AlbumsAllTimeEditRoute,
  AlbumsAllTimeIndexRoute: AlbumsAllTimeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/not-found",
        "/signout",
        "/admin/add",
        "/albums/$year",
        "/admin/",
        "/albums/",
        "/artists/",
        "/playlist/",
        "/releases/",
        "/signin/",
        "/songs/",
        "/admin/edit/$albumId",
        "/albums/all-time/edit",
        "/albums/all-time/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/signout": {
      "filePath": "signout.tsx"
    },
    "/admin/add": {
      "filePath": "admin/add.tsx"
    },
    "/albums/$year": {
      "filePath": "albums/$year.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/albums/": {
      "filePath": "albums/index.tsx"
    },
    "/artists/": {
      "filePath": "artists/index.tsx"
    },
    "/playlist/": {
      "filePath": "playlist/index.tsx"
    },
    "/releases/": {
      "filePath": "releases/index.tsx"
    },
    "/signin/": {
      "filePath": "signin/index.tsx"
    },
    "/songs/": {
      "filePath": "songs/index.tsx"
    },
    "/admin/edit/$albumId": {
      "filePath": "admin/edit/$albumId.tsx"
    },
    "/albums/all-time/edit": {
      "filePath": "albums/all-time/edit.tsx"
    },
    "/albums/all-time/": {
      "filePath": "albums/all-time/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
